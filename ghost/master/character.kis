#==============================================================================
# サーフィス設定等
#==============================================================================

#------------------------------------------------------------------------------
# サーフィス制御システム コア部分

# 現在のスコープ番号(0〜)
CharScope : 0

# マルチキャラクタ同時トークフラグ、\_sタグ
# MultiCharFlag : (初期状態では未定義)

# 改行フラグ
# キャラクタ切替があった場合、\n[half]にする判断用
# CRLFFlag : (初期状態では未定義)

=kis
# スコープが指定のものと違ったら切り替える
# 第1引数: 切り替えるスコープ番号
# 戻り値 : 今のスコープ番号と第1引数が異なればスコープ切り替えタグ
# 備考   : マルチキャラクタ同時トークフラグが立っていたら解除し、\_sタグ挿入
function ChangeScopeIfNOT $(
	if $[ $(.size @arg) != 2 ] $(return);
	.setstr @cs $(NonNegative $@arg[1]);
	# 改行フラグが立っていたら、直前に改行してからスコープを変更した時。
	# 1行半改行にするため、"\n[half]"を追加出力
	# 同時トークフラグ解除前に出力すること
	if $[ ${CharScope} != ${@cs} && $(.size CRLFFlag) ] "\n[half]";
	# 同時トークフラグが立って居たら解除
	if $(.size MultiCharFlag) "\_s";
	if $[ ${CharScope} != ${@cs} ] $(
		# キャラクタスコープを変更し、切り替えタグを出力
		.setstr CharScope ${@cs};
		if $[ ${@cs} < 2 ] "\\"${@cs} else "\\p["${@cs}"]"
	);
	.clear MultiCharFlag;
	.clear CRLFFlag;
);

# マルチキャラクタ同時トーク
# 引数群: 同時にしゃべるキャラクタのスコープ番号を列挙
# 戻り値: \_sタグ
# 備考  : マルチキャラクタ同時トークフラグを立てる
function MultiChar $(
	if $[ $(.size @arg) <= 1 ] $(return);
	.setstr MultiCharFlag 1;
	.clear @arg[0];
	return "\_s["$(.join @arg ",")"]";
);
=end

# えんいー・終了
# OnSuspend等に備え、以下の処理を必ずやること。
#・キャラクタスコープ番号を0に初期化
#・マルチキャラクタフラグを解除し、必要に応じて\_sタグも挿入
#・改行フラグを解除

=kis
# 終了時共通処理
function FinishCommon $(
	.setstr CharScope 0;
	.clear MultiCharFlag;
	.clear CRLFFlag;
);
=end

e            : $(
	if $(.size MultiCharFlag) "\_s";
	if $[ ${System.Request.ID} != "OnClose" ] "\\e";
	FinishCommon;
)
終了         : $(if $(.size MultiCharFlag) "\_s" ; FinishCommon)\-
切替終了     : $(
	if $(.size MultiCharFlag) "\_s";
	if $[ $(.size System.InstalledGhost) > 1 ] 
		\!["change,ghost,random"]
	else
		\-
	;
	FinishCommon;
)

# 改行
n            : \n$(.setstr CRLFFlag 1)
# 次のスコープ変更で改行しない
noCR         : $(.clear CRLFFlag)

#------------------------------------------------------------------------------
# 句点、記号など

、           : 、\w4
。           : 。\w8
？           : ？\w8
！           : ！\w8
♪           : ♪\w8
〜           : 〜\w8
…           : …\w8
……         : …\w8…\w8
………       : …\w8…\w8…\w8
‥           : ‥\w8
‥‥         : ‥\w8‥\w8
‥‥‥       : ‥\w8‥\w8‥\w8
・           : ・\w4
w4           : \w4
w8           : \w8
w16          : \w8\w8


#------------------------------------------------------------------------------
# サーフィス定義

#------------------------------------------------------------------------------
# サーフィスの初期化

=kis
# トーク開始時のためのサーフィス初期化
# デフォルト基底関数
# 第1引数 : 対象キャラのスコープ番号
# 第2引数 : 対象キャラの基底状態サーフィス番号
# 第3引数 : 初期設定タグ
# 第4引数 : デフォルトとして使うキャラクタの表情指定エントリ名
function デフォルト基底 $(
	if $[ $(length $@arg[4]) == 0 ] $(
		setstr @surface "\\s["$@arg[2]"]";
		setstr @ename "@surface";
	) else $(
		setstr @ename $@arg[4];
	);
	echo $@arg[3];
	setstr CharScope $@arg[1];
	echo ${${@ename}};
);
# サーフィス初期化
function デフォルト $(
	デフォルト基底 0 0 \1\s[10]\0 $@arg[1];
);
=end
# 初期化用のエントリ(過去互換のため)
デフォルト     : $(デフォルト)


#------------------------------------------------------------------------------
# キャラクタの表情




#------------------------------------------------------------------------------
# 複数キャラクタの表情
# 単独キャラクタの定義を使用し、最後にマルチキャラクタタグ挿入



#------------------------------------------------------------------------------
# その他

わたし   : ${FPP}
あなた   : ${SPP}
ユーザー : ${username}


#==============================================================================
# 独自関数
#==============================================================================

=kis
# SynchronizedTalkカスタム版
# 書式   : $(mySynchronizedTalk 引数1 引数2 [引数3...])
# 第1引数: \0側の発話内容
# 第2引数: \1側の発話内容
# 第3引数以降: 各スコープの発話内容(省略可能)
# 戻り値 : 同時発話するスクリプト
# 機能   : \0側と\1側のトークを一文字ごとに切り出し、スコープ切替を挟んで
#          繋げて返す
# 備考   : sslex_char_atを内部で使用しているので、発話内容にさくらスクリプトが
#          含まれていても正常動作する
function mySynchronizedTalk $(
	if $[ $(.size @arg) < 3 ] $(return);

	.clear @arg[0];
	.setstr @scope 0;
	loop $(.size @arg) $(
		# 以降、各スコープに関する初期化
		# 文字列ポインタ初期化
		.setstr @p[${@scope}] 0;
		# スコープタグ初期化
		.setstr @prefix[${@scope}] $(
			if $[ ${@scope} <= 1 ]
				"\\"${@scope}
			else
				"\\p["${@scope}"]"
		);
		.inc @scope;
	);

	#すべての文字を表示しきるまでループ
	.setstr @cond 0;
	.setstr @lastscope $(NULL);
	until $[ ${@cond} == $(.size @arg) ] $(
		.setstr @cond 0;
		.setstr @scope 0;
		loop $(.size @arg) $(
			.clear @char;
			.setstr @char $(sslex_char_at $@arg[${@scope}] $@p[${@scope}]);
			.setstr @p[${@scope}] $[ $@p[${@scope}] + $(.length ${@char}) ];
			if $[ ${@char} != "" ] $(
				# まだ末尾に達しておらず、文字がある
				if $[ ${@scope} != ${@lastscope} ] $(
					# 直前に文字があったスコープと違うならスコープ切り替え
					.pushstr @talk $@prefix[${@scope}];
					.setstr @lastscope ${@scope};
				);
				.pushstr @talk ${@char};
			);
			# 終了条件を計算
			if $[ $@p[${@scope}] >= $(.length $@arg[${@scope}]) ] $(.inc @cond);
			.inc @scope;
		);
	);

	# まとめて出力
	return $(.get @talk);

	#lastscopeをCharScopeに設定
	.setstr CharScope ${@lastscope};
);
=end
